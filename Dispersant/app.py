import streamlit as st
import numpy as np
import pandas as pd
import xgboost as xgb
from sklearn.model_selection import train_test_split

# Read the dipersant dataset
df = pd.read_csv('dispersant data.txt')

# Add values for the oil viscosity
df['Кинематическая вязкость мм^2/c'] = [53.93703185, 52.01929009, 51.16827148, 49.39687929, 47.62585342, 54.14819829, 52.28101805, 51.06152762, 49.08000025, 46.72218529, 55.85539311, 54.11375604, 52.22187454, 50.09957914, 47.75615207, 57.19173141, 56.06394362, 54.96846648, 53.1043827, 51.07347796, 58.76257319, 57.09108162, 54.87042849, 52.67311681, 50.92627717, 50.8851331, 49.74955699, 48.52521553, 46.50407022, 46.13950907, 56.93934504, 55.91585761, 54.77124313, 53.00036981, 51.67706223, 55.90154724, 54.77124313, 54.17716139, 52.66730128, 52.49559881, 56.66001157, 55.80006527, 54.41883423, 52.82686099, 51.20067545, 60.1053157, 58.1568214, 57.03684862, 55.7838914, 54.06083282, 54.88998117, 53.10138019, 52.04106316, 51.46989812, 51.10311691, 55.97267632, 54.57717541, 52.51064065, 50.78109638, 47.83328669, 56.1244859, 54.4964137, 52.45897016, 50.64860757, 48.0, 58.39352216, 57.39875711, 56.16555615, 55.34566157, 53.89947786, 58.7127397, 57.77768125, 56.5035979, 54.40070622, 52.82686099, 57.19765108, 56.07587502, 54.54216658, 52.5867179, 50.69886978, 52.19316512, 50.63628206, 49.27752054, 48.25898634, 47.87682128, 47.24372312, 46.10625395, 58.21272664, 56.4953478, 55.178821, 53.73441191, 52.99535291, 58.95931314, 57.99379857, 57.17404756, 56.28267109, 54.64160716, 61.16574781, 59.63293162, 57.98132588, 56.79407947, 55.75449561, 61.01979064, 59.25112708, 57.62467279, 56.12918496, 54.96274255, 62.20244552, 61.185782, 59.85806749, 58.27377834, 57.03684862, 62.20445697, 61.0098265, 60.23568133, 59.00354816, 57.59393681, 63.41331261, 62.73306669, 61.16574781, 60.01286791, 59.20758565, 61.61673856, 60.28817092, 59.08345035, 57.93616817, 56.69140195, 64.0549144, 62.99013727, 61.79753408, 60.53614665, 59.44516524, 64.63093969, 63.07693738, 61.65482507, 60.2215893, 59.20758565, 64.34406679, 62.77271763, 61.67584586, 60.26129371, 59.33718464, 65.24218471, 63.51651326, 62.11913612, 61.13088324, 60.63164218, 61.4601342, 62.44302399, 63.54732598, 64.19148734, 65.28489549, 61.45546474, 62.80034443, 63.90243392, 64.64639073, 65.36657514, 62.10881105, 63.19148734, 64.44923029, 65.23721871, 65.47813085, 62.88614982, 63.37584904, 63.71238218, 64.93766872, 65.2869008, 63.71517773, 62.88614982, 62.10881105, 61.80954185, 60.63164218, 66.74372867, 65.60651005, 64.24384441, 63.19858713, 62.60924855, 64.76976515, 63.60561617, 62.99615513, 61.88466314, 61.04042047, 66.9935048, 65.74372867, 64.73923748, 64.03955971, 63.32983142, 66.61762234, 65.38986369, 64.61590403, 63.89631978, 63.16639235, 67.56051225, 66.52390467, 65.69313926, 64.89611915, 63.98065727, 68.03037824, 67.27660316, 66.07118461, 65.51841208, 65.23721871, 68.10657052, 67.20217438, 65.76864477, 64.36620232, 63.32776058, 68.32123918, 67.0722233, 66.01249724, 64.81006457, 63.67339601, 69.3244436, 68.40637812, 67.44899752, 66.70239455, 65.8371826, 69.21987878, 68.18363207, 67.52341749, 66.74663174, 66.19611583, 69.04649532, 68.49255471, 67.74881391, 67.00568672, 66.33657514, 69.45660331, 68.7661875, 68.25349007, 67.57175636, 67.07185947, 70.36348943, 69.31092586, 68.38846209, 67.19124439, 66.38766888, 70.59637867, 69.74878406, 68.72133497, 67.75348244, 67.35711618, 71.06454995, 70.03874334, 69.08536707, 68.14457191, 67.71202602, 70.81465881, 70.25807422, 69.37430215, 68.15533981]

# Add values for the oil density
df["Плотность"]=[0.78087572, 0.78607559, 0.79127547, 0.79647535, 0.80167522,
0.78062596, 0.78582584, 0.79102553, 0.79622541, 0.80142529,
0.7778505 , 0.78305038, 0.78825025, 0.79345013, 0.79865001,
0.77407577, 0.77927565, 0.78447552, 0.7896754 , 0.79487528,
0.77357776, 0.77877763, 0.78397751, 0.78917739, 0.79437726,
0.773378  , 0.77857787, 0.78377775, 0.78897763, 0.7941775 ,
0.77288047, 0.77808034, 0.78328022, 0.7884801 , 0.79367998,
0.77148551, 0.77668538, 0.78188526, 0.78708514, 0.79228502,
0.77079097, 0.77699084, 0.78219072, 0.7873906 , 0.79259048,
0.76969639, 0.77589626, 0.78109614, 0.78629602, 0.7914959 ,
0.76880233, 0.7750022 , 0.78020208, 0.78540195, 0.79060183,
0.76840343, 0.7746033 , 0.77980317, 0.78500305, 0.79020293,
0.7668103 , 0.77301018, 0.77820905, 0.78340892, 0.7886088 ,
0.76511622, 0.7713161 , 0.77651697, 0.78171685, 0.78691673,
0.7645195 , 0.77071938, 0.77591925, 0.78111913, 0.78631901,
0.76342364, 0.76962352, 0.77482339, 0.78002327, 0.78522315,
0.76282742, 0.7690273 , 0.77422717, 0.77942605, 0.78462593,
0.76173284, 0.76793272, 0.77313259, 0.77833147, 0.78353135,
0.76113636, 0.76733624, 0.77253612, 0.777736  , 0.78293588,
0.76054035, 0.76674023, 0.77194011, 0.77714099, 0.78233987,
0.75914539, 0.76534527, 0.77054515, 0.77574503, 0.78194491,
0.75765087, 0.76385075, 0.76905063, 0.77425051, 0.77945039,
0.75685523, 0.76305511, 0.76825499, 0.77345487, 0.77865475,
0.75576108, 0.76196096, 0.76715984, 0.77235972, 0.7775596 ,
0.75496689, 0.76116677, 0.76636565, 0.77156553, 0.77676541,
0.75427208, 0.76047196, 0.76567084, 0.77087072, 0.7760706 ,
0.75367657, 0.75987645, 0.76507533, 0.77027521, 0.77547509,
0.75308156, 0.75928144, 0.76448032, 0.7696802 , 0.77488008,
0.75238404, 0.75858392, 0.7637828 , 0.76898268, 0.77418256,
0.75148889, 0.75768877, 0.76288865, 0.76808853, 0.77328841,
0.75079335, 0.75709124, 0.76229112, 0.767491  , 0.77269088,
0.7500978 , 0.7564947 , 0.76169458, 0.76689446, 0.77209534,
0.74950279, 0.75589969, 0.76109957, 0.76629945, 0.77150033,
0.74890627, 0.75530317, 0.76050305, 0.76570393, 0.77090481,
0.74811063, 0.75450752, 0.7597074 , 0.76490828, 0.77010916,
0.74731499, 0.75371188, 0.75891176, 0.76411264, 0.76931352,
0.74651897, 0.75291586, 0.75811574, 0.76331662, 0.7685175 ,
0.74562382, 0.75202071, 0.75722059, 0.76242147, 0.76762235,
0.7449273 , 0.75132419, 0.75652407, 0.76172495, 0.76692583,
0.74403115, 0.75042804, 0.75562892, 0.7608298 , 0.76602968,
0.74333463, 0.74973152, 0.7549324 , 0.76013328, 0.76533316,
0.74253858, 0.74893547, 0.75413635, 0.75933723, 0.76453711,
0.74184304, 0.74823993, 0.75344081, 0.75864169, 0.76384157,
0.74094688, 0.74734378, 0.75254466, 0.75774554, 0.76294542,
0.74025034, 0.74664724, 0.75184812, 0.757049  , 0.76224888,
0.73945429, 0.74585119, 0.75105207, 0.75625295, 0.76145283,
0.73885777, 0.74525466, 0.75045554, 0.75565642, 0.7608563 ,
0.73806172, 0.7444586 , 0.74965948, 0.75486036, 0.76006024,
0.73726566, 0.74366255, 0.74886343, 0.75406431, 0.75926419,
0.7364696 , 0.74286649, 0.74806737, 0.75326825, 0.75846813,
0.73567355]


# Perform label encoding for the 'месторождение' feature
from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
df['месторождение_encoded'] = label_encoder.fit_transform(df['Месторождение'])
df['cooтношение_encoded'] = label_encoder.fit_transform(df['соотношение'])

X = df.drop(columns=['Эффективность %', 'Месторождение', 'соотношение'], axis=1)
y = df['Эффективность %']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=42)

# Load the saved XGBoost model
model_file_path = "xgboost_model.model"  # Specify the path and filename of your saved model
XGBoost_final = xgb.Booster()
XGBoost_final.load_model(model_file_path)

# Define the app interface
st.title('Oil Dispersant Efficiency Prediction App')

# Input fields for user input
st.sidebar.header('Input Parameters')
temperature = st.sidebar.slider('Temperature (C)', min_value=0.0, max_value=30.0, value=25.0)
salinity = st.sidebar.slider('Salinity (g/L)', min_value=0.0, max_value=35.0, value=15.0)
viscosity = st.sidebar.slider('Kinematic Viscosity (mm^2/c)', min_value=0.0, max_value=80.0, value=50.0)
density = st.sidebar.slider('Density', min_value=0.5, max_value=0.9, value=0.7)
location_encoded = st.sidebar.slider('Location Encoded', min_value=0, max_value=1, value=0)
ratio_encoded = st.sidebar.slider('Ratio Encoded', min_value=0, max_value=1, value=0)

# Button to trigger predictions
if st.sidebar.button('Predict'):
    # Prepare input data
    input_data = np.array([[temperature, salinity, viscosity, density, location_encoded, ratio_encoded]])  # Add other input values here
    
    # Make prediction
    prediction = XGBoost_final.predict(xgb.DMatrix(input_data))
    
    # Display prediction
    st.success(f'Predicted Efficiency: {prediction[0]:.2f}%')